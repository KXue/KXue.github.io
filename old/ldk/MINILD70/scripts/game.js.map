{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/index.js",
    "src/objects/BossSprite.js",
    "src/objects/PlayerSprite.js",
    "src/objects/ShipSprite.js",
    "src/states/BootState.js",
    "src/states/GameOverState.js",
    "src/states/GameState.js",
    "src/states/PreloadState.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "import BootState from 'states/BootState';\nimport GameOverState from 'states/GameOverState';\nimport GameState from 'states/GameState';\nimport PreloadState from 'states/PreloadState';\n\nclass Game extends Phaser.Game {\n\n  constructor() {\n    super(800, 600, Phaser.AUTO, 'content', null);\n    this.state.add('BootState', BootState);\n    this.state.add('GameOverState', GameOverState);\n    this.state.add('GameState', GameState);\n    this.state.add('PreloadState', PreloadState);\n    this.state.start('BootState');\n  }\n}\n\nnew Game();\n",
    "import ShipSprite from 'objects/ShipSprite';\n\nclass BossSprite extends Phaser.Sprite {\n  constructor(game, position) {\n    super(game, position.x, position.y, 'ring', 0);\n    this.anchor.x = 0.5;\n    this.anchor.y = 0.5;\n    this.tint = 0x000000;\n    this.currentPosition = new Phaser.Point(this.x, this.y);\n  }\n  spawnShip(playerPosition) {\n    let spawnPoint = new Phaser.Point(50, 0);\n    let shipAngle = this.currentPosition.angle(playerPosition, true);\n    spawnPoint.rotate(0, 0, shipAngle, true);\n    let ship =\n        new ShipSprite(this.game, spawnPoint.add(this.x, this.y), shipAngle);\n    return ship;\n  }\n}\nexport default BossSprite;\n",
    "class PlayerSprite extends Phaser.Sprite {\n  constructor(game, position) {\n    super(game, position.x, position.y, 'rocket', 0);\n    game.physics.enable(this, Phaser.Physics.ARCADE);\n    this.body.collideWorldBounds = true;\n    this.anchor.x = 0.5;\n    this.anchor.y = 0.5;\n    this.body.gravity.y = 500;\n    this.body.maxVelocity.y = 500;\n    this.body.setSize(25, 50, 12, 0); // width, height, xoffset, yoffset\n    this.tint = 0x00ff00;\n    this.scale.setTo(0.75, 0.75);\n  }\n}\nexport default PlayerSprite;\n",
    "class ShipSprite extends Phaser.Sprite {\n  constructor(game, position, angle) {\n    super(game, position.x, position.y, 'ship', 0);\n    game.physics.enable(this, Phaser.Physics.ARCADE);\n    this.body.collideWorldBounds = true;\n    this.anchor.x = 0.5;\n    this.anchor.y = 0.5;\n    this.tint = 0xff0000;\n    this.scale.setTo(0.5, 0.5);\n    this.body.rotation = angle;\n  }\n  calculateDirection(playerPoint) {\n    let playerAngle = this.body.position.angle(playerPoint, true);\n    let directionFactor = 1;\n    if ((Math.abs(this.body.rotation - playerAngle) <= 180)) {\n      directionFactor = -1;\n    }\n    if ((this.body.rotation - playerAngle) < 0) {\n      this.body.angularVelocity = -70 * directionFactor;\n    } else {\n      this.body.angularVelocity = 70 * directionFactor;\n    }\n    let velocityPoint = new Phaser.Point(150, 0);\n    velocityPoint.rotate(0, 0, this.body.rotation, true);\n    this.body.velocity = velocityPoint;\n  }\n}\nexport default ShipSprite;\n",
    "class BootState extends Phaser.State {\n  preload() {}\n  create() {\n    this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;\n    this.game.physics.startSystem(Phaser.Physics.ARCADE);\n    // this.game.physics.arcade.gravity.y = 500;\n    this.game.state.start(\"PreloadState\");\n  }\n}\nexport default BootState;\n",
    "class GameOverState extends Phaser.State {\n  preload() {}\n  create() { this.state.start('GameState'); }\n}\nexport default GameOverState;\n",
    "import BossSprite from 'objects/BossSprite';\nimport PlayerSprite from 'objects/PlayerSprite';\nimport ShipSprite from 'objects/ShipSprite';\nconst origin = new Phaser.Point();\nconst maxDashTime = 250;\nclass GameState extends Phaser.State {\n\n  create() {\n    let center = {x : this.game.world.centerX, y : this.game.world.centerY};\n    this.game.stage.backgroundColor = '#cecece';\n    this.cursors = this.game.input.keyboard.createCursorKeys();\n    this.dashButton = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);\n    this.game.input.keyboard.addKeyCapture(Phaser.Keyboard.SPACEBAR);\n    this.player = new PlayerSprite(this.game, new Phaser.Point(center.x, 600));\n    this.boss = new BossSprite(this.game, center);\n    this.dashEndTime = 0;\n    this.isDashing = false;\n    this.add.existing(this.boss);\n    this.add.existing(this.player);\n    this.shipGroup = this.add.group();\n    // this.player.scale.setTo(0.5, 0.5); // for now. remove later\n    this.dashButton.onDown.add(() => {\n      this.isDashing = true;\n      this.dashEndTime = this.time.now + maxDashTime;\n      let velocityPoint = new Phaser.Point(400, 0);\n      velocityPoint.rotate(0, 0, this.player.body.rotation, true);\n      this.player.body.velocity = velocityPoint;\n      this.player.body.gravity.y = 0;\n    });\n    this.shipSpawnLoop =\n        this.time.events.loop(Phaser.Timer.SECOND, this.spawnShip, this);\n  }\n  update() {\n    let directionPoint = new Phaser.Point();\n    if (this.cursors.left.isDown) {\n      directionPoint.y += 1;\n    }\n    if (this.cursors.right.isDown) {\n      directionPoint.y -= 1\n    }\n    if (this.cursors.up.isDown) {\n      directionPoint.x -= 1;\n    }\n    if (this.cursors.down.isDown) {\n      directionPoint.x += 1;\n    }\n    this.player.body.rotation = directionPoint.angle(origin, true) - 90;\n    if ((this.time.now >= this.dashEndTime) && this.isDashing) {\n      this.player.body.velocity.x = 0;\n      this.player.body.velocity.y = 0;\n      this.player.body.gravity.y = 1000;\n      this.isDashing = false;\n    }\n    this.shipGroup.forEach((ship) => {\n      ship.calculateDirection(this.player.body.position);\n    }, this);\n  }\n  render() { this.game.debug.bodyInfo(this.player, 16, 24); }\n\n  spawnShip() {\n    let ship = this.boss.spawnShip(this.player.body.position);\n    this.shipGroup.add(ship);\n    ship.body.rotation = 90;\n  }\n}\n\nexport default GameState;\n",
    "class PreloadState extends Phaser.State {\n  preload() {\n    // this.game.load.image('hexTile', 'assets/hexTile300.png');\n    this.game.load.image('rocket', 'assets/rocket50.png');\n    this.game.load.image('ring', 'assets/ring.png');\n    this.game.load.image('ship', 'assets/ship.png');\n  }\n\n  create() { this.game.state.start(\"GameState\"); }\n}\nexport default PreloadState;\n"
  ]
}